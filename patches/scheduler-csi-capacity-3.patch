--- ../vendor/k8s.io/kubernetes/pkg/scheduler/eventhandlers.go	2025-08-06 17:55:42
+++ ../vendor/k8s.io/kubernetes/pkg/scheduler/eventhandlers.go	2025-08-06 17:56:13
@@ -19,6 +19,8 @@
 import (
 	"context"
 	"fmt"
+	"os"
+	"strconv"
 	"strings"
 	"time"
 
@@ -543,6 +545,14 @@
 			}
 			handlers = append(handlers, handlerRegistration)
 		case fwk.CSIStorageCapacity:
+			// FIX kubernetes 1.23 and lower version API missing issue
+			minorVersionStr := os.Getenv("KUBE_API_VERSION_MINOR")
+			if minorVersionStr != "" {
+				minorVersion, err := strconv.Atoi(minorVersionStr)
+				if err != nil || minorVersion < 24 {
+					continue
+				}
+			}
 			if handlerRegistration, err = informerFactory.Storage().V1().CSIStorageCapacities().Informer().AddEventHandler(
 				buildEvtResHandler(at, fwk.CSIStorageCapacity),
 			); err != nil {
@@ -578,6 +588,14 @@
 			}
 			handlers = append(handlers, handlerRegistration)
 		case fwk.ResourceClaim:
+			// FIX kubernetes lower version API missing issue
+			minorVersionStr := os.Getenv("KUBE_API_VERSION_MINOR")
+			if minorVersionStr != "" {
+				minorVersion, err := strconv.Atoi(minorVersionStr)
+				if err != nil || minorVersion < 34 {
+					continue
+				}
+			}
 			if utilfeature.DefaultFeatureGate.Enabled(features.DynamicResourceAllocation) {
 				handlerRegistration = resourceClaimCache.AddEventHandler(
 					buildEvtResHandler(at, fwk.ResourceClaim),
@@ -585,6 +603,14 @@
 				handlers = append(handlers, handlerRegistration)
 			}
 		case fwk.ResourceSlice:
+			// FIX kubernetes lower version API missing issue
+			minorVersionStr := os.Getenv("KUBE_API_VERSION_MINOR")
+			if minorVersionStr != "" {
+				minorVersion, err := strconv.Atoi(minorVersionStr)
+				if err != nil || minorVersion < 34 {
+					continue
+				}
+			}
 			if utilfeature.DefaultFeatureGate.Enabled(features.DynamicResourceAllocation) {
 				if handlerRegistration, err = resourceSliceTracker.AddEventHandler(
 					buildEvtResHandler(at, fwk.ResourceSlice),
@@ -594,6 +620,14 @@
 				handlers = append(handlers, handlerRegistration)
 			}
 		case fwk.DeviceClass:
+			// FIX kubernetes lower version API missing issue
+			minorVersionStr := os.Getenv("KUBE_API_VERSION_MINOR")
+			if minorVersionStr != "" {
+				minorVersion, err := strconv.Atoi(minorVersionStr)
+				if err != nil || minorVersion < 34 {
+					continue
+				}
+			}
 			if utilfeature.DefaultFeatureGate.Enabled(features.DynamicResourceAllocation) {
 				if handlerRegistration, err = informerFactory.Resource().V1().DeviceClasses().Informer().AddEventHandler(
 					buildEvtResHandler(at, fwk.DeviceClass),
