apiVersion: v1
kind: ConfigMap
metadata:
  name: tensor-fusion-sys-vector-config
  namespace: {{ include "tensor-fusion.namespace" . }}
data:
  vector-operator.yaml: |
    api:
      enabled: true
    sources:
      metrics:
        type: file
        data_dir: /logs
        include:
          - /logs/metrics*.log

      kubernetes_logs:
        type: kubernetes_logs
        self_node_name: "${NODE_NAME}"
        extra_label_selector: "tensor-fusion.ai/component in (operator)"

    transforms:
      prepare_kubernetes_logs:
        type: remap
        inputs:
          - kubernetes_logs
        source: |
          .message = .message
          .container = .kubernetes.container_name
          .pod = .kubernetes.pod_name
          .namespace = .kubernetes.pod_namespace
          .component = .kubernetes.pod_labels."tensor-fusion.ai/component"
          del(.kubernetes)
          del(.file)
          del(.source_type)
    sinks:
      sink_greptimedb_operator_metrics:
        type: http
        inputs:
          - metrics        
        method: post
        encoding:
          codec: text
        {{- if ne .Values.greptime.isCloud true }}
        uri: "http://{{ .Values.greptime.host }}:4000/v1/influxdb/api/v2/write?db=public&precision=ms"
        {{- else }}
        uri: "https://{{ .Values.greptime.host }}/v1/influxdb/api/v2/write?db={{ .Values.greptime.db }}&precision=ms"
        request:
          headers:
            # refer https://docs.greptime.com/user-guide/protocols/http/#post-influxdb-line-protocol-data
            Authorization: "token {{ .Values.greptime.user }}:{{ .Values.greptime.password }}"
        {{- end }}
      
      sink_greptimedb_operator_logs:
        type: greptimedb_logs
        compression: gzip
        table: tf_system_log
        inputs:
          - prepare_kubernetes_logs
        {{- if ne .Values.greptime.isCloud true }}
        endpoint: http://{{ .Values.greptime.host }}:4000
        dbname: public
        {{- else }}
        endpoint: https://{{ .Values.greptime.host }}
        dbname: {{ .Values.greptime.db }}
        username: {{ .Values.greptime.user }}
        password: {{ .Values.greptime.password }}
        {{- end }}

  vector-hypervisor.yaml: |
    api:
      enabled: true
    
    sources:
      kubernetes_logs:
        type: kubernetes_logs
        self_node_name: "${NODE_NAME}"
        extra_label_selector: "tensor-fusion.ai/component in (hypervisor,worker)"
      metrics:
        type: file
        data_dir: /logs
        include:
          - /logs/metrics.log.*
    
    transforms:
      prepare_kubernetes_logs:
        type: remap
        inputs:
          - kubernetes_logs
        source: |
          .message = .message
          .container = .kubernetes.container_name
          .pod = .kubernetes.pod_name
          .namespace = .kubernetes.pod_namespace
          .component = .kubernetes.pod_labels."tensor-fusion.ai/component"
          del(.kubernetes)
          del(.file)
          del(.source_type)

    sinks:
      sink_greptimedb_hypervisor_metrics:
        type: http
        inputs:
          - metrics        
        method: post
        encoding:
          codec: text
        {{- if ne .Values.greptime.isCloud true }}
        uri: "http://{{ .Values.greptime.host }}:4000/v1/influxdb/api/v2/write?db=public&precision=ms"
        {{- else }}
        uri: "https://{{ .Values.greptime.host }}/v1/influxdb/api/v2/write?db={{ .Values.greptime.db }}&precision=ms"
        request:
          headers:
            # refer https://docs.greptime.com/user-guide/protocols/http/#post-influxdb-line-protocol-data
            Authorization: "token {{ .Values.greptime.user }}:{{ .Values.greptime.password }}"
        {{- end }}
        
      sink_greptimedb_hypervisor_worker_logs:
        type: greptimedb_logs
        compression: gzip
        table: tf_system_log
        inputs:
          - prepare_kubernetes_logs
        {{- if ne .Values.greptime.isCloud true }}
        endpoint: http://{{ .Values.greptime.host }}:4000
        dbname: public
        {{- else }}
        endpoint: https://{{ .Values.greptime.host }}
        dbname: {{ .Values.greptime.db }}
        username: {{ .Values.greptime.user }}
        password: {{ .Values.greptime.password }}
        {{- end }}
